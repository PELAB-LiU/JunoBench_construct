{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "from collections import Counter\nimport cv2\nimport os\nimport glob\nimport skimage\nimport numpy as np\nimport pandas as pd\nimport seaborn as sn\nimport preprocessing\nfrom tqdm import tqdm\nfrom io import BytesIO\nfrom PIL import Image\nfrom os import listdir\nimport matplotlib.pyplot as plt\nfrom imageio import imread\nfrom skimage.transform import resize\nfrom collections import Counter\nimport IPython.display as display\n\nsn.set()\n\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\nfrom sklearn.utils import shuffle\nfrom xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.preprocessing import MinMaxScaler,LabelBinarizer\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.applications.mobilenet import MobileNet\nfrom tensorflow.keras.applications.nasnet import NASNetMobile\nfrom tensorflow.keras.applications.densenet import DenseNet169\nfrom tensorflow.keras.applications.densenet import DenseNet121\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.layers import Input, Dense, Dropout, BatchNormalization, Flatten, Activation, GlobalAveragePooling2D,Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "InputPath = 'data/images-after-converted_small/'\nCsvPath = 'data/breast-level_annotations (1).csv.zip'"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "df = pd.read_csv(CsvPath)\ndf.head(3)"
    },
    {
      "execution_count": 7,
      "code_cell_id": 3,
      "code": "X= []\ny=[]"
    },
    {
      "execution_count": 8,
      "code_cell_id": 4,
      "code": "import imageio\nfor i in range(df.shape[0]):\n\n path = InputPath+df.laterality[i]+'-'+df.view_position[i]+'/'+df.image_id[i]+'.png'\n if os.path.exists(path):\n img = cv2.imread(path,0)\n img_size = cv2.resize(img, (100, 100), interpolation = cv2.INTER_LINEAR)\n\n X.append(img_size)\n\n y.append(df.breast_birads[i])"
    },
    {
      "execution_count": 9,
      "code_cell_id": 5,
      "code": "Y = []\nimport re\nfor i in y:\n Y.append(int(re.sub(\"[A-Z]+\\-[A-Z]+\", \"\", i)))"
    },
    {
      "execution_count": 10,
      "code_cell_id": 6,
      "code": "X = np.array(X)"
    },
    {
      "execution_count": 11,
      "code_cell_id": 7,
      "code": "Y = np.array(Y)"
    },
    {
      "execution_count": 12,
      "code_cell_id": 8,
      "code": "train_images, val_images, train_labels, val_labels=train_test_split(X, Y,\n test_size=0.3, random_state=42)\nval_images,test_images, val_labels, test_labels=train_test_split(val_images, val_labels,\n test_size=0.33, random_state=42)\n\nprint('Number of training samples : {}'.format(train_images.shape[0]))\nprint('Number of validation samples : {}'.format(val_images.shape[0]))\nprint('Number of test samples : {}'.format(test_images.shape[0]))"
    },
    {
      "execution_count": 13,
      "code_cell_id": 9,
      "code": "from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nmodel = Sequential(name = 'VGG19')\n\nmodel.add(Conv2D(input_shape = (100, 100,3), filters = 64, kernel_size = (3,3), padding = 'same',\n activation = 'relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(units = 4096, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units = 4096, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(20, activation = 'softmax'))\n\nmodel.compile(optimizer=Adam(0.00001), loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])\nmodel.summary()"
    }
  ],
  "target": {
    "code_cell_id": 10,
    "code": "history = model.fit(train_images, train_labels, batch_size = 16, epochs=2, validation_data=(val_images, val_labels), verbose = 1)"
  }
}