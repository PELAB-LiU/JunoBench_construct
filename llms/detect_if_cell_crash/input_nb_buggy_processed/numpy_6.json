{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom tensorflow.keras.preprocessing import image\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Dropout\nfrom keras.optimizers import Adam"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "import tensorflow as tf\nfrom keras.applications.resnet_v2 import ResNet50V2\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport cv2"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "import os\nfrom tensorflow.keras.preprocessing.image import load_img"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "labels_all = pd.read_csv('data_small/New folder/labels.csv')\nprint(labels_all.shape)\nlabels_all.head()"
    },
    {
      "execution_count": 5,
      "code_cell_id": 4,
      "code": "breed_all = labels_all['breed']\nbreed_count = breed_all.value_counts()\nbreed_count.head()"
    },
    {
      "execution_count": 6,
      "code_cell_id": 5,
      "code": "CLASS_NAME = ['scottish_deerhound', 'maltese_dog', 'afghan_hound', 'entlebucher', 'bernese_mountain_dog']\nlabels = labels_all[(labels_all['breed'].isin(CLASS_NAME))]\nlabels = labels.reset_index()\nlabels.head()"
    },
    {
      "execution_count": 8,
      "code_cell_id": 6,
      "code": "train_path = 'data_small/New folder/train'\n\ntrain_labels = pd.read_csv('data_small/New folder/labels.csv')"
    },
    {
      "execution_count": 9,
      "code_cell_id": 7,
      "code": "train_labels.head()"
    }
  ],
  "target": {
    "code_cell_id": 10,
    "code": "X_data = np.zeros((len(labels), 224, 224, 3), dtype='float32')\n\nY_data = label_binarize(labels['breed'], classes = CLASS_NAME)\n\nfor i in tqdm(range(len(labels))):\n try:\n img = image.load_img(f'data_small/New folder/train/{labels[\"id\"][i]}.jpg', target_size=(224, 224))\n except FileNotFoundError:\n continue\n img = image.img_to_array(img)\n\n x = np.expand_dims(img.copy(), axis=0)\n X_data[i] = x / 255.0\nX_data['id'] = train_labels['id']\n\nprint('\\nTrain Images shape: ',X_data.shape,' size: {:,}'.format(X_data.size))\nprint('One-hot encoded output shape: ',Y_data.shape,' size: {:,}'.format(Y_data.size))"
  }
}