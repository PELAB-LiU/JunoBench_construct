{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import chi2_contingency"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "app_train = pd.read_csv('data/application_train.csv.zip')\napp_test=pd.read_csv('data/application_test.csv.zip')"
    },
    {
      "execution_count": 3,
      "code_cell_id": 4,
      "code": "app_train.replace({'XNA': np.nan, 'XNP': np.nan, 'Unknown': np.nan}, inplace = True)\napp_test.replace({'XNA': np.nan, 'XNP': np.nan, 'Unknown': np.nan}, inplace = True)"
    },
    {
      "execution_count": 4,
      "code_cell_id": 7,
      "code": "app_test.drop(app_train.columns[app_train.isnull().mean()>0.4],axis=1, inplace=True)"
    },
    {
      "execution_count": 5,
      "code_cell_id": 8,
      "code": "app_train.drop(app_train.columns[app_train.isnull().mean()>0.4],axis=1, inplace=True)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 9,
      "code": "app_train.shape"
    },
    {
      "execution_count": 7,
      "code_cell_id": 10,
      "code": "app_test.shape"
    },
    {
      "execution_count": 8,
      "code_cell_id": 13,
      "code": "Cat_columns_lower_percentage_nan = [i for i in app_train.columns[(((app_train.isnull().sum() / app_train.shape[0]) * 100) > 0)\n & (((app_train.isnull().sum() / app_train.shape[0]) * 100) < 14)]\n if app_train[i].dtype == 'O']\n\nnum_columns_lower_percentage_nan = [i for i in app_train.columns[(((app_train.isnull().sum() / app_train.shape[0]) * 100) > 0)\n & (((app_train.isnull().sum() / app_train.shape[0]) * 100) < 14)]\n if app_train[i].dtype != 'O']"
    },
    {
      "execution_count": 9,
      "code_cell_id": 14,
      "code": "for i in Cat_columns_lower_percentage_nan:\n app_test[i].fillna(app_train[i].mode()[0], inplace=True)\n app_train[i].fillna(app_train[i].mode()[0], inplace=True)"
    },
    {
      "execution_count": 10,
      "code_cell_id": 15,
      "code": "col_mod_transfrom = [i for i in num_columns_lower_percentage_nan if i not in ['EXT_SOURCE_2', 'AMT_ANNUITY','AMT_GOODS_PRICE']]\ncol_mean_transform = ['EXT_SOURCE_2', 'AMT_ANNUITY']"
    },
    {
      "execution_count": 11,
      "code_cell_id": 16,
      "code": "for i in col_mod_transfrom:\n app_test[i].fillna(app_train[i].mode()[0], inplace=True)\n app_train[i].fillna(app_train[i].mode()[0], inplace=True)\nfor i in col_mean_transform:\n app_test[i].fillna(app_train[i].mean(), inplace=True)\n app_train[i].fillna(app_train[i].mean(), inplace=True)"
    },
    {
      "execution_count": 12,
      "code_cell_id": 17,
      "code": "app_train['AMT_GOODS_PRICE'].fillna(app_train['AMT_GOODS_PRICE'].median(),inplace = True)"
    },
    {
      "execution_count": 13,
      "code_cell_id": 18,
      "code": "all_numerical_cols = list(app_train.select_dtypes(exclude='object').columns)\n\ncont_cols = [col for col in all_numerical_cols if col != \"TARGET\" and col[:5]!='FLAG_']"
    },
    {
      "execution_count": 14,
      "code_cell_id": 20,
      "code": "proper_days_empolyed_df = app_train\nproper_days_empolyed_df['YEARS_EMPLOYED'] = proper_days_empolyed_df['DAYS_EMPLOYED']/-365.25"
    },
    {
      "execution_count": 15,
      "code_cell_id": 21,
      "code": "app_train['DAYS_EMPLOYED'].replace({365243:np.nan},inplace=True)\napp_test['DAYS_EMPLOYED'].replace({365243:np.nan},inplace=True)"
    },
    {
      "execution_count": 16,
      "code_cell_id": 22,
      "code": "proper_days_empolyed_df = app_train\nproper_days_empolyed_df['YEARS_EMPLOYED'] = proper_days_empolyed_df['DAYS_EMPLOYED']/-365.25"
    },
    {
      "execution_count": 17,
      "code_cell_id": 25,
      "code": "app_train = app_train[app_train['AMT_INCOME_TOTAL'] != 117000000.0]"
    },
    {
      "execution_count": 18,
      "code_cell_id": 27,
      "code": "cat_col = app_train.select_dtypes('object')\ncat_col.describe()"
    },
    {
      "execution_count": 19,
      "code_cell_id": 30,
      "code": "app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Secondary / secondary special'] = app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Secondary / secondary special'].fillna('Laborers')\napp_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Higher education'] = app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Higher education'].fillna('Core staff')\napp_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Incomplete higher'] = app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Incomplete higher'].fillna('Laborers')\napp_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Lower secondary'] = app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Lower secondary'].fillna('Laborers')\napp_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Academic degree'] = app_train['OCCUPATION_TYPE'][app_train['NAME_EDUCATION_TYPE']=='Academic degree'].fillna('Managers')\n\napp_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Secondary / secondary special'] = app_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Secondary / secondary special'].fillna('Laborers')\napp_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Higher education'] = app_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Higher education'].fillna('Core staff')\napp_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Incomplete higher'] = app_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Incomplete higher'].fillna('Laborers')\napp_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Lower secondary'] = app_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Lower secondary'].fillna('Laborers')\napp_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Academic degree'] = app_test['OCCUPATION_TYPE'][app_test['NAME_EDUCATION_TYPE']=='Academic degree'].fillna('Managers')"
    },
    {
      "execution_count": 20,
      "code_cell_id": 32,
      "code": "app_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Accountants') |\n (app_train['OCCUPATION_TYPE'] == 'Cleaning staff') |\n (app_train['OCCUPATION_TYPE'] == 'Cooking staff') |\n (app_train['OCCUPATION_TYPE'] == 'Core staff')|\n (app_train['OCCUPATION_TYPE'] == 'Drivers')|\n (app_train['OCCUPATION_TYPE'] == 'HR staff')|\n (app_train['OCCUPATION_TYPE'] == 'High skill tech staff')|\n (app_train['OCCUPATION_TYPE'] == 'IT staff')|\n (app_train['OCCUPATION_TYPE'] == 'Laborers')|\n (app_train['OCCUPATION_TYPE'] == 'Low-skill Laborers')|\n (app_train['OCCUPATION_TYPE'] == 'Managers')] = app_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Accountants') |\n (app_train['OCCUPATION_TYPE'] == 'Cleaning staff') |\n (app_train['OCCUPATION_TYPE'] == 'Cooking staff') |\n (app_train['OCCUPATION_TYPE'] == 'Core staff')|\n (app_train['OCCUPATION_TYPE'] == 'Drivers')|\n (app_train['OCCUPATION_TYPE'] == 'HR staff')|\n (app_train['OCCUPATION_TYPE'] == 'High skill tech staff')|\n (app_train['OCCUPATION_TYPE'] == 'IT staff')|\n (app_train['OCCUPATION_TYPE'] == 'Laborers')|\n (app_train['OCCUPATION_TYPE'] == 'Low-skill Laborers')|\n (app_train['OCCUPATION_TYPE'] == 'Managers')].fillna('Business Entity Type 3')\n\napp_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Accountants') |\n (app_test['OCCUPATION_TYPE'] == 'Cleaning staff') |\n (app_test['OCCUPATION_TYPE'] == 'Cooking staff') |\n (app_test['OCCUPATION_TYPE'] == 'Core staff')|\n (app_test['OCCUPATION_TYPE'] == 'Drivers')|\n (app_test['OCCUPATION_TYPE'] == 'HR staff')|\n (app_test['OCCUPATION_TYPE'] == 'High skill tech staff')|\n (app_test['OCCUPATION_TYPE'] == 'IT staff')|\n (app_test['OCCUPATION_TYPE'] == 'Laborers')|\n (app_test['OCCUPATION_TYPE'] == 'Low-skill Laborers')|\n (app_test['OCCUPATION_TYPE'] == 'Managers')] = app_test['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Accountants') |\n (app_test['OCCUPATION_TYPE'] == 'Cleaning staff') |\n (app_test['OCCUPATION_TYPE'] == 'Cooking staff') |\n (app_test['OCCUPATION_TYPE'] == 'Core staff')|\n (app_test['OCCUPATION_TYPE'] == 'Drivers')|\n (app_test['OCCUPATION_TYPE'] == 'HR staff')|\n (app_test['OCCUPATION_TYPE'] == 'High skill tech staff')|\n (app_test['OCCUPATION_TYPE'] == 'IT staff')|\n (app_test['OCCUPATION_TYPE'] == 'Laborers')|\n (app_test['OCCUPATION_TYPE'] == 'Low-skill Laborers')|\n (app_test['OCCUPATION_TYPE'] == 'Managers')].fillna('Business Entity Type 3')\n\napp_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Medicine staff')|\n (app_train['OCCUPATION_TYPE'] == 'Secretaries')] = app_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Medicine staff')|\n (app_train['OCCUPATION_TYPE'] == 'Secretaries')].fillna('Medicine')\napp_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Medicine staff')|\n (app_test['OCCUPATION_TYPE'] == 'Secretaries')] = app_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Medicine staff')|\n (app_test['OCCUPATION_TYPE'] == 'Secretaries')].fillna('Medicine')\napp_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Private service staff')|\n (app_train['OCCUPATION_TYPE'] == 'Realty agents')|\n (app_train['OCCUPATION_TYPE'] == 'Sales staff')] = app_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Private service staff')|\n (app_train['OCCUPATION_TYPE'] == 'Realty agents')|\n (app_train['OCCUPATION_TYPE'] == 'Sales staff')].fillna('Self-employed')\napp_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Private service staff')|\n (app_test['OCCUPATION_TYPE'] == 'Realty agents')|\n (app_test['OCCUPATION_TYPE'] == 'Sales staff')] = app_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Private service staff')|\n (app_test['OCCUPATION_TYPE'] == 'Realty agents')|\n (app_test['OCCUPATION_TYPE'] == 'Sales staff')].fillna('Self-employed')\n\napp_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Security staff')] = app_train['ORGANIZATION_TYPE'][(app_train['OCCUPATION_TYPE'] == 'Security staff')].fillna('Security')\napp_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Security staff')] = app_test['ORGANIZATION_TYPE'][(app_test['OCCUPATION_TYPE'] == 'Security staff')].fillna('Security')"
    },
    {
      "execution_count": 21,
      "code_cell_id": 33,
      "code": "app_test['ORGANIZATION_TYPE'] = app_test['ORGANIZATION_TYPE'].fillna(app_test['ORGANIZATION_TYPE'].mode()[0])"
    },
    {
      "execution_count": 22,
      "code_cell_id": 34,
      "code": "app_test['EXT_SOURCE_3'] = app_test['EXT_SOURCE_3'].fillna(app_train.groupby(['OCCUPATION_TYPE'])['EXT_SOURCE_3'].transform('mean'))\napp_train['EXT_SOURCE_3'] = app_train['EXT_SOURCE_3'].fillna(app_train.groupby(['OCCUPATION_TYPE'])['EXT_SOURCE_3'].transform('mean'))"
    },
    {
      "execution_count": 23,
      "code_cell_id": 35,
      "code": "app_test['DAYS_EMPLOYED'] = app_test['DAYS_EMPLOYED'].fillna(app_train.groupby(['OCCUPATION_TYPE'])['DAYS_EMPLOYED'].transform('mean'))\napp_train['DAYS_EMPLOYED'] = app_train['DAYS_EMPLOYED'].fillna(app_train.groupby(['OCCUPATION_TYPE'])['DAYS_EMPLOYED'].transform('mean'))"
    },
    {
      "execution_count": 24,
      "code_cell_id": 36,
      "code": "proper_days_empolyed_df = app_train\nproper_days_empolyed_df['YEARS_EMPLOYED'] = proper_days_empolyed_df['DAYS_EMPLOYED']/-365.25"
    },
    {
      "execution_count": 25,
      "code_cell_id": 37,
      "code": "app_test['NAME_TYPE_SUITE'].replace({'Other_A':'Other','Other_B':'Other','Group of people':'Other'},inplace=True)\napp_train['NAME_TYPE_SUITE'].replace({'Other_A':'Other','Other_B':'Other','Group of people':'Other'},inplace=True)\n\napp_test['NAME_INCOME_TYPE'].replace({'Unemployed':'Other','Student':'Other','Maternity leave':'Other'},inplace=True)\napp_train['NAME_INCOME_TYPE'].replace({'Unemployed':'Other','Student':'Other','Maternity leave':'Other'},inplace=True)"
    },
    {
      "execution_count": 26,
      "code_cell_id": 39,
      "code": "others = app_train['ORGANIZATION_TYPE'].value_counts().index[15:]\nlabel = 'Others'\napp_train['ORGANIZATION_TYPE'] = app_train['ORGANIZATION_TYPE'].replace(others, label)\napp_test['ORGANIZATION_TYPE'] = app_test['ORGANIZATION_TYPE'].replace(others, label)"
    },
    {
      "execution_count": 27,
      "code_cell_id": 43,
      "code": "app_train.drop(['YEARS_EMPLOYED'], axis = 1,inplace=True)"
    },
    {
      "execution_count": 28,
      "code_cell_id": 45,
      "code": "app_train = app_train.drop(columns=['CNT_FAM_MEMBERS','LIVE_REGION_NOT_WORK_REGION', 'REG_REGION_NOT_WORK_REGION', 'OBS_60_CNT_SOCIAL_CIRCLE'])\napp_test = app_test.drop(columns=['CNT_FAM_MEMBERS','LIVE_REGION_NOT_WORK_REGION', 'REG_REGION_NOT_WORK_REGION', 'OBS_60_CNT_SOCIAL_CIRCLE'])"
    },
    {
      "execution_count": 29,
      "code_cell_id": 46,
      "code": "cols_to_remove = ['AMT_CREDIT', 'CNT_FAM_MEMBERS', 'REG_REGION_NOT_WORK_REGION', 'LIVE_REGION_NOT_WORK_REGION', 'OBS_60_CNT_SOCIAL_CIRCLE','SK_ID_CURR']\ncont_cols = list(set(cont_cols) - set(cols_to_remove))\ncont_cols"
    },
    {
      "execution_count": 30,
      "code_cell_id": 47,
      "code": "def impute_outliers_IQR(df):\n\n q1=df.quantile(0.25)\n q3=df.quantile(0.75)\n\n IQR=q3-q1\n\n upper = df[~(df>(q3+1.5*IQR))].max()\n lower = df[~(df<(q1-1.5*IQR))].min()\n\n df = np.where(df > upper, df.quantile(0.8), np.where(df < lower, df.quantile(0.2),df))\n\n return df"
    },
    {
      "execution_count": 31,
      "code_cell_id": 48,
      "code": "for i in cont_cols:\n app_train[i] = impute_outliers_IQR(app_train[i])\n app_test[i] = impute_outliers_IQR(app_test[i])"
    },
    {
      "execution_count": 32,
      "code_cell_id": 49,
      "code": "app_train['LTV'] = app_train['AMT_CREDIT']/app_train['AMT_GOODS_PRICE']\napp_train['DTI'] = app_train['AMT_ANNUITY']/app_train['AMT_INCOME_TOTAL']\napp_train['Employed/Birth'] = app_train['DAYS_EMPLOYED']/app_train['DAYS_BIRTH']\napp_train['Flag_Greater_30'] = (app_train['DAYS_BIRTH']/-365.25).apply(lambda x: 1 if x > 30 else 0)\napp_train['Flag_Employment_Greater_5'] = (app_train['DAYS_EMPLOYED']/-365.25).apply(lambda x: 1 if x > 5 else 0)\n\napp_test['LTV'] = app_test['AMT_CREDIT']/app_test['AMT_GOODS_PRICE']\napp_test['DTI'] = app_test['AMT_ANNUITY']/app_test['AMT_INCOME_TOTAL']\napp_test['Employed/Birth'] = app_test['DAYS_EMPLOYED']/app_test['DAYS_BIRTH']\napp_test['Flag_Greater_30'] = (app_test['DAYS_BIRTH']/-365.25).apply(lambda x: 1 if x > 30 else 0)\napp_test['Flag_Employment_Greater_5'] = (app_test['DAYS_EMPLOYED']/-365.25).apply(lambda x: 1 if x > 5 else 0)"
    },
    {
      "execution_count": 33,
      "code_cell_id": 50,
      "code": "from sklearn.preprocessing import OrdinalEncoder\nfrom category_encoders import TargetEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.metrics import roc_auc_score, confusion_matrix"
    },
    {
      "execution_count": 34,
      "code_cell_id": 52,
      "code": "enc = TargetEncoder()\napp_train[cat_col.columns] = enc.fit_transform(app_train[cat_col.columns], app_train['TARGET'])"
    },
    {
      "execution_count": 35,
      "code_cell_id": 53,
      "code": "app_test[cat_col.columns] = enc.transform(app_test[cat_col.columns])"
    },
    {
      "execution_count": 36,
      "code_cell_id": 54,
      "code": "X = app_train.drop(columns=['TARGET','SK_ID_CURR'])\ny = app_train['TARGET']"
    },
    {
      "execution_count": 37,
      "code_cell_id": 55,
      "code": "X_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, stratify=y, random_state=42)"
    },
    {
      "execution_count": 38,
      "code_cell_id": 78,
      "code": "def protected_division(x1, x2):\n if x2 == 0:\n return 1\n else:\n return x1 / x2\n\ndef protected_sqrt(x):\n if x < 0:\n return 0\n else:\n return np.sqrt(x)\n\ndef protected_log(x):\n if x <= 0:\n return 0\n else:\n return np.log(x)"
    },
    {
      "execution_count": 39,
      "code_cell_id": 79,
      "code": "import numpy as np\nimport pandas as pd\nfrom deap import creator, base, tools, gp\n\npset = gp.PrimitiveSet(\"MAIN\", arity=2)\npset.addPrimitive(np.add, arity=2)\npset.addPrimitive(np.subtract, arity=2)\npset.addPrimitive(np.multiply, arity=2)\npset.addPrimitive(np.maximum, arity=2)\npset.addPrimitive(np.minimum, arity=2)\npset.addPrimitive(protected_division, arity=2)\npset.addPrimitive(protected_sqrt, arity=1)\npset.addPrimitive(protected_log, arity=1)\npset.addPrimitive(np.sin, arity=1)\npset.addPrimitive(np.cos, arity=1)\npset.addTerminal(0)\npset.addTerminal(1)"
    },
    {
      "execution_count": 41,
      "code_cell_id": 80,
      "code": "creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", gp.PrimitiveTree, fitness=creator.FitnessMax)\n\ntoolbox = base.Toolbox()\n\ntoolbox.register(\"expr\", gp.genHalfAndHalf, pset=pset, min_=1, max_=3)\ntoolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.expr)\ntoolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n\ntoolbox.register(\"mate\", gp.cxOnePoint)\ntoolbox.register(\"mutate\", gp.mutUniform, expr=toolbox.expr, pset=pset)\ntoolbox.register(\"evaluate\", evaluate_fitness)\ntoolbox.register(\"select\", tools.selTournament, tournsize=3)"
    },
    {
      "execution_count": 40,
      "code_cell_id": 81,
      "code": "def transform_gp_structure(individual, X):\n expr = gp.compile(individual, pset)\n return np.array([expr(*row) for row in X])\n\ndef evaluate_fitness(individual):\n\n X_train_gp = transform_gp_structure(individual, X_train)\n rf_model_gp.fit(X_train_gp, y_train)\n X_test_gp = transform_gp_structure(individual, X_test)\n y_pred_gp = rf_model_gp.predict_proba(X_test_gp)[:, 1]\n auc_gp = roc_auc_score(y_test, y_pred_gp)\n return auc_gp,"
    }
  ],
  "target": {
    "code_cell_id": 82,
    "code": "pop_size = 100\nnum_generations = 50\n\npopulation = toolbox.population(n=pop_size)\n\nfor generation in range(num_generations):\n\n fitnesses = map(evaluate_fitness, population)\n for individual, fitness in zip(population, fitnesses):\n individual.fitness.values = fitness\n\n offspring = toolbox.select(population, len(population))\n\n offspring = list(map(toolbox.clone, offspring))\n\n for child1, child2 in zip(offspring[::2], offspring[1::2]):\n if random.random() < crossover_prob:\n toolbox.mate(child1, child2)\n del child1.fitness.values\n del child2.fitness.values\n\n for mutant in offspring:\n if random.random() < mutation_prob:\n toolbox.mutate(mutant)\n del mutant.fitness.values\n\n population[:] = offspring"
  }
}