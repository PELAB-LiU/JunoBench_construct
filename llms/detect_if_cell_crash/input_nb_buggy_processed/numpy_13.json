{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import os\nimport IPython\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.io import wavfile\nfrom scipy.fft import fft, fftfreq\nfrom scipy.signal import spectrogram, find_peaks"
    },
    {
      "execution_count": 2,
      "code_cell_id": 27,
      "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport librosa\nimport numpy as np\n\nimport sklearn\nimport sklearn.cluster\nimport sklearn.pipeline\n\nimport matplotlib.pyplot as plt\n%matplotlib inline"
    },
    {
      "execution_count": 3,
      "code_cell_id": 31,
      "code": "path = \"data_small/\"\ndef FeatureExtractor(path, n_mels, fmax=20000, fmin=20):\n\n data = []\n max_harm_length = 0\n\n for dirname, _, filenames in os.walk(path):\n for filename in filenames:\n foldername = os.path.basename(dirname)\n full_path = os.path.join(dirname, filename)\n\n y, sr = librosa.load(full_path)\n mel = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=n_mels, fmax=fmax, fmin=fmin)\n logam = librosa.power_to_db(mel)\n data.append(logam)\n\n data = np.array(data)\n return data"
    }
  ],
  "target": {
    "code_cell_id": 32,
    "code": "NX = FeatureExtractor(path, n_mels = 10)"
  }
}