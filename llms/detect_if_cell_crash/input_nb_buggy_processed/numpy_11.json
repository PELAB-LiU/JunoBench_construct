{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 1,
      "code": "import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Reshape, Dropout, Dense\nfrom tensorflow.keras.layers import Flatten, BatchNormalization\nfrom tensorflow.keras.layers import Activation, ZeroPadding2D\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras.layers import UpSampling2D, Conv2D\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.optimizers import Adam\nimport numpy as np\nfrom PIL import Image\nfrom tqdm import tqdm\nimport os\nimport time\nimport matplotlib.pyplot as plt"
    },
    {
      "execution_count": 2,
      "code_cell_id": 2,
      "code": "GENERATE_RES = 2\n\nGENERATE_SQUARE = 32 * GENERATE_RES\nIMAGE_CHANNELS = 3\n\nPREVIEW_ROWS = 1\nPREVIEW_COLS = 1\nPREVIEW_MARGIN = 16\n\nSEED_SIZE = 100\n\nDATA_PATH = 'data'\nEPOCHS = 5000\nBATCH_SIZE = 32\nBUFFER_SIZE = 60000\n\nprint(f\"Will generate {GENERATE_SQUARE}px square images.\")"
    }
  ],
  "target": {
    "code_cell_id": 8,
    "code": "training_binary_path = os.path.join(DATA_PATH,\n f'training_data_{GENERATE_SQUARE}_{GENERATE_SQUARE}.npy')\n\nprint(f\"Looking for file: {training_binary_path}\")\n\nif not os.path.isfile(training_binary_path):\n start = time.time()\n print(\"Loading training images...\")\n\n training_data = []\n faces_path = 'data/apple_disease_classification/Train/Blotch_Apple'\n for filename in tqdm(os.listdir(faces_path)):\n path = os.path.join(faces_path,filename)\n image = Image.open(path).resize((GENERATE_SQUARE,\n GENERATE_SQUARE),Image.LANCZOS)\n training_data.append(np.asarray(image))\n training_data = np.reshape(training_data,(-1,GENERATE_SQUARE,\n GENERATE_SQUARE,3))\n training_data = training_data.astype(np.float32)\n training_data = training_data / 127.5 - 1.\n\n print(\"Saving training image binary...\")\n np.save(training_binary_path,training_data)\n elapsed = time.time()-start\n\nelse:\n print(\"Loading previous training pickle...\")\n training_data = np.load(training_binary_path)"
  }
}