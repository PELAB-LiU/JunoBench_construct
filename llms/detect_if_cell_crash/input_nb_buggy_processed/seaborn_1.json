{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import math, os, re, warnings, random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras import optimizers, applications, Sequential, losses\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\n\ndef seed_everything(seed=0):\n random.seed(seed)\n np.random.seed(seed)\n tf.random.set_seed(seed)\n os.environ['PYTHONHASHSEED'] = str(seed)\n os.environ['TF_DETERMINISTIC_OPS'] = '1'\n\nseed = 0\nseed_everything(seed)\nwarnings.filterwarnings(\"ignore\")"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "try:\n tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n print(f'Running on TPU {tpu.master()}')\nexcept ValueError:\n tpu = None\n\nif tpu:\n tf.config.experimental_connect_to_cluster(tpu)\n tf.tpu.experimental.initialize_tpu_system(tpu)\n strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n strategy = tf.distribute.get_strategy()\n\nAUTO = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "BATCH_SIZE = 16 * REPLICAS\nWARMUP_EPOCHS = 3\nWARMUP_LEARNING_RATE = 1e-4 * REPLICAS\nEPOCHS = 30\nLEARNING_RATE = 3e-5 * REPLICAS\nHEIGHT = 192\nWIDTH = 192\nCHANNELS = 3\nN_CLASSES = 104\nES_PATIENCE = 5"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "model_path = f'model_{HEIGHT}x{WIDTH}.h5'\n\nGCS_PATH = \"data/tfrecords-jpeg-{}x{}\".format(HEIGHT, WIDTH)\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/train/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/val/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '/test/*.tfrec')\n\nCLASSES = [\n 'pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',\n 'wild geranium', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood',\n 'globe thistle', 'snapdragon', \"colt's foot\", 'king protea', 'spear thistle',\n 'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily',\n 'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower',\n 'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy',\n 'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william',\n 'carnation', 'garden phlox', 'love in the mist', 'cosmos', 'alpine sea holly',\n 'ruby-lipped cattleya', 'cape flower', 'great masterwort', 'siam tulip',\n 'lenten rose', 'barberton daisy', 'daffodil', 'sword lily', 'poinsettia',\n 'bolero deep blue', 'wallflower', 'marigold', 'buttercup', 'daisy',\n 'common dandelion', 'petunia', 'wild pansy', 'primula', 'sunflower',\n 'lilac hibiscus', 'bishop of llandaff', 'gaura', 'geranium', 'orange dahlia',\n 'pink-yellow dahlia', 'cautleya spicata', 'japanese anemone',\n 'black-eyed susan', 'silverbush', 'californian poppy', 'osteospermum',\n 'spring crocus', 'iris', 'windflower', 'tree poppy', 'gazania', 'azalea',\n 'water lily', 'rose', 'thorn apple', 'morning glory', 'passion flower',\n 'lotus', 'toad lily', 'anthurium', 'frangipani', 'clematis', 'hibiscus',\n 'columbine', 'desert-rose', 'tree mallow', 'magnolia', 'cyclamen ',\n 'watercress', 'canna lily', 'hippeastrum ', 'bee balm', 'pink quill',\n 'foxglove', 'bougainvillea', 'camellia', 'mallow', 'mexican petunia',\n 'bromelia', 'blanket flower', 'trumpet creeper', 'blackberry lily',\n 'common tulip', 'wild rose']"
    },
    {
      "execution_count": 5,
      "code_cell_id": 4,
      "code": "AUTO = tf.data.experimental.AUTOTUNE\n\ndef decode_image(image_data):\n image = tf.image.decode_jpeg(image_data, channels=3)\n image = tf.cast(image, tf.float32) / 255.0\n image = tf.reshape(image, [HEIGHT, WIDTH, 3])\n return image\n\ndef read_labeled_tfrecord(example):\n LABELED_TFREC_FORMAT = {\n \"image\": tf.io.FixedLenFeature([], tf.string),\n \"class\": tf.io.FixedLenFeature([], tf.int64),\n }\n example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n image = decode_image(example['image'])\n label = tf.cast(example['class'], tf.int32)\n return image, label\n\ndef read_unlabeled_tfrecord(example):\n UNLABELED_TFREC_FORMAT = {\n \"image\": tf.io.FixedLenFeature([], tf.string),\n \"id\": tf.io.FixedLenFeature([], tf.string),\n\n }\n example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n image = decode_image(example['image'])\n idnum = example['id']\n return image, idnum\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n ignore_order = tf.data.Options()\n if not ordered:\n ignore_order.experimental_deterministic = False\n\n dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO)\n dataset = dataset.with_options(ignore_order)\n dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n\n return dataset\n\ndef data_augment(image, label):\n crop_size = tf.random.uniform([], int(HEIGHT*.7), HEIGHT, dtype=tf.int32)\n\n image = tf.image.random_flip_left_right(image)\n image = tf.image.random_flip_up_down(image)\n image = tf.image.random_saturation(image, lower=0, upper=2)\n\n image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n\n return image, label\n\ndef get_training_dataset():\n dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n dataset = dataset.repeat()\n dataset = dataset.shuffle(2048)\n dataset = dataset.batch(BATCH_SIZE)\n dataset = dataset.prefetch(AUTO)\n return dataset\n\ndef get_training_dataset_preview(ordered=True):\n dataset = load_dataset(TRAINING_FILENAMES, labeled=True, ordered=ordered)\n dataset = dataset.batch(BATCH_SIZE)\n dataset = dataset.cache()\n dataset = dataset.prefetch(AUTO)\n return dataset\n\ndef get_validation_dataset(ordered=False):\n dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n dataset = dataset.batch(BATCH_SIZE)\n dataset = dataset.cache()\n dataset = dataset.prefetch(AUTO)\n return dataset\n\ndef get_test_dataset(ordered=False):\n dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n dataset = dataset.batch(BATCH_SIZE)\n dataset = dataset.prefetch(AUTO)\n return dataset\n\ndef count_data_items(filenames):\n\n n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n return np.sum(n)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 5,
      "code": "np.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n images, labels = data\n numpy_images = images.numpy()\n numpy_labels = labels.numpy()\n if numpy_labels.dtype == object:\n numpy_labels = [None for _ in enumerate(numpy_images)]\n\n return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n if correct_label is None:\n return CLASSES[label], True\n correct = (label == correct_label)\n return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n plt.subplot(*subplot)\n plt.axis('off')\n plt.imshow(image)\n if len(title) > 0:\n plt.title(title, fontsize=int(titlesize) if not red else int(titlesize/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize/1.5))\n return (subplot[0], subplot[1], subplot[2]+1)\n\ndef display_batch_of_images(databatch, predictions=None):\n \"\"\"This will work with:\n display_batch_of_images(images)\n display_batch_of_images(images, predictions)\n display_batch_of_images((images, labels))\n display_batch_of_images((images, labels), predictions)\n \"\"\"\n\n images, labels = batch_to_numpy_images_and_labels(databatch)\n if labels is None:\n labels = [None for _ in enumerate(images)]\n\n rows = int(math.sqrt(len(images)))\n cols = len(images)//rows\n\n FIGSIZE = 13.0\n SPACING = 0.1\n subplot=(rows,cols,1)\n if rows < cols:\n plt.figure(figsize=(FIGSIZE,FIGSIZE/cols*rows))\n else:\n plt.figure(figsize=(FIGSIZE/rows*cols,FIGSIZE))\n\n for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n title = '' if label is None else CLASSES[label]\n correct = True\n if predictions is not None:\n title, correct = title_from_label_and_target(predictions[i], label)\n dynamic_titlesize = FIGSIZE*SPACING/max(rows,cols)*40+3\n subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n\n plt.tight_layout()\n if label is None and predictions is None:\n plt.subplots_adjust(wspace=0, hspace=0)\n else:\n plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n plt.show()\n\ndef dataset_to_numpy_util(dataset, N):\n dataset = dataset.unbatch().batch(N)\n for images, labels in dataset:\n numpy_images = images.numpy()\n numpy_labels = labels.numpy()\n break;\n return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n label = np.argmax(label, axis=-1)\n correct = (label == correct_label)\n return \"{} [{}{}{}]\".format(CLASSES[label], str(correct), ', shoud be ' if not correct else '',\n CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower_eval(image, title, subplot, red=False):\n plt.subplot(subplot)\n plt.axis('off')\n plt.imshow(image)\n plt.title(title, fontsize=14, color='red' if red else 'black')\n return subplot+1\n\ndef display_9_images_with_predictions(images, predictions, labels):\n subplot=331\n plt.figure(figsize=(13,13))\n for i, image in enumerate(images):\n title, correct = title_from_label_and_target(predictions[i], labels[i])\n subplot = display_one_flower_eval(image, title, subplot, not correct)\n if i >= 8:\n break;\n\n plt.tight_layout()\n plt.subplots_adjust(wspace=0.1, hspace=0.1)\n plt.show()"
    },
    {
      "execution_count": 7,
      "code_cell_id": 6,
      "code": "NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\ntrain_dataset = get_training_dataset_preview(ordered=True)\ny_train = next(iter(train_dataset.unbatch().map(lambda image, label: label).batch(NUM_TRAINING_IMAGES))).numpy()\nprint(f'Number of training images {NUM_TRAINING_IMAGES}')\n\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nvalid_dataset = get_validation_dataset(ordered=True)\ny_valid = next(iter(valid_dataset.unbatch().map(lambda image, label: label).batch(NUM_VALIDATION_IMAGES))).numpy()\nprint(f'Number of validation images {NUM_VALIDATION_IMAGES}')\n\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint(f'Number of test images {NUM_TEST_IMAGES}')\ntest_dataset = get_test_dataset(ordered=True)"
    }
  ],
  "target": {
    "code_cell_id": 10,
    "code": "train_agg = np.asarray([[label, (y_train == index).sum()] for index, label in enumerate(CLASSES)])\nvalid_agg = np.asarray([[label, (y_valid == index).sum()] for index, label in enumerate(CLASSES)])\n\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 64))\n\nax1 = sns.barplot(x=train_agg[...,1], y=train_agg[...,0], order=CLASSES, ax=ax1)\nax1.set_title('Train', fontsize=30)\nax1.tick_params(labelsize=16)\n\nax2 = sns.barplot(x=valid_agg[...,1], y=valid_agg[...,0], order=CLASSES, ax=ax2)\nax2.set_title('Validation', fontsize=30)\nax2.tick_params(labelsize=16)\n\nplt.show()"
  }
}