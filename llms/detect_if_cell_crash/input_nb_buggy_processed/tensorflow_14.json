{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 1,
      "code": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import ZeroPadding2D,Convolution2D,MaxPooling2D\nfrom tensorflow.keras.layers import Dense,Dropout,Softmax,Flatten,Activation,BatchNormalization\nfrom tensorflow.keras.preprocessing.image import load_img,img_to_array\nfrom tensorflow.keras.applications.imagenet_utils import preprocess_input\nimport tensorflow.keras.backend as K"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "model = Sequential()\nmodel.add(ZeroPadding2D((1,1),input_shape=(224,224, 3)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\nmodel.add(Convolution2D(4096, (7, 7), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(4096, (1, 1), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(2622, (1, 1)))\nmodel.add(Flatten())\nmodel.add(Activation('softmax'))\n\nmodel.load_weights('data/vgg_face_weights.h5')"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator"
    }
  ],
  "target": {
    "code_cell_id": 4,
    "code": "main_data_directory = 'data/train-data-imgs'\n\ninput_size = (224, 224)\n\ntrain_datagen = ImageDataGenerator(\n rescale=1.0/255,\n rotation_range=20,\n width_shift_range=0.2,\n height_shift_range=0.2,\n horizontal_flip=True,\n zoom_range=0.2\n)\n\ntrain_generator = train_datagen.flow_from_directory(\n main_data_directory,\n target_size=input_size,\n batch_size=32,\n class_mode='categorical',\n shuffle=True\n)\n\nbase_model = VGG16(weights='imagenet', include_top=False,classes=7)\n\nfor layer in base_model.layers:\n layer.trainable = False\n\nbase_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nbase_model.load_weights('data/vgg_face_weights.h5')\n\nbase_model.fit(\n train_generator,\n steps_per_epoch=len(train_generator),\n epochs=10,\n)\n\nbase_model.save('data/updated_vgg_face_weights.h5')"
  }
}