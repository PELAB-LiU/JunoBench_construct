{
  "executed": [],
  "target": {
    "code_cell_id": 1,
    "code": "import torch\nimport torchvision\nfrom torchvision.models.detection import fasterrcnn_resnet50_fpn\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom torchvision.transforms import transforms\nfrom torch.utils.data import DataLoader\n\ntransform = transforms.Compose([\n transforms.ToTensor(),\n transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\ntrainset = torchvision.datasets.VOCDetection(root=\"data_small\", year='2012', image_set='train', download=False, transform=transform)\ntestset = torchvision.datasets.VOCDetection(root=\"data_small\", year='2012', image_set='val', download=False, transform=transform)\n\ntrainloader = DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)\ntestloader = DataLoader(testset, batch_size=4, shuffle=False, num_workers=2)\n\nmodel = fasterrcnn_resnet50_fpn(pretrained=True)\n\nnum_classes = 21\nin_features = model.roi_heads.box_predictor.cls_score.in_features\nmodel.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)\n\noptimizer = torch.optim.SGD(model.parameters(), lr=0.005, momentum=0.9, weight_decay=0.0005)\n\nnum_epochs = 10\nfor epoch in range(num_epochs):\n for i, data in enumerate(trainloader, 0):\n inputs, labels = data\n optimizer.zero_grad()\n outputs = model(inputs)\n loss = sum(loss for loss in outputs.values())\n loss.backward()\n optimizer.step()\n\n if i % 2000 == 1999:\n print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, loss.item()))\n\nprint('Finished Training')"
  }
}