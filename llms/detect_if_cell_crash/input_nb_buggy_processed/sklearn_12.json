{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n for filename in filenames:\n print(os.path.join(dirname, filename))"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "data =pd.read_csv(\"data/train.csv\")\n\ndata.head()"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "data['Embarked'].fillna('S', inplace=True)\ndata.loc[data.Fare.isnull(),'Fare'] = data['Fare'].mean()\ndata.loc[data.Age.isnull(),'Age'] = data['Age'].mean()\n\nlabels = data[\"Survived\"]\nfeatures = data.drop(columns=['PassengerId','Survived','PassengerId','Cabin','Ticket','Name'])\n\nhot =pd.get_dummies(features,columns=['Sex','Embarked'])\nfeatures =hot\nfeatures,labels"
    },
    {
      "execution_count": 5,
      "code_cell_id": 4,
      "code": "X_train,X_test,y_train,y_test =train_test_split(features, labels, test_size=0.3)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 5,
      "code": "X_train,y_train"
    },
    {
      "execution_count": 7,
      "code_cell_id": 6,
      "code": "def evaluate(model,y_test=y_test):\n predictions = model.predict(X_test)\n acc = accuracy_score(predictions,y_test)\n return round(acc*100,3)"
    },
    {
      "execution_count": 8,
      "code_cell_id": 9,
      "code": "model = RandomForestClassifier()\nmodel.fit(X_train,y_train)\nacc =evaluate(model)\nprint(acc)"
    },
    {
      "execution_count": 9,
      "code_cell_id": 10,
      "code": "model = LogisticRegression()\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'LogisticRegression (accuracy): {acc}%')\n\nmodel = DecisionTreeClassifier(criterion='gini', max_depth=12, random_state=42)\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'DecisionTreeClassifier with gini (accuracy): {acc}%')\n\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=12, random_state=42)\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'DecisionTreeClassifier with entropy (accuracy): {acc}%')\n\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\n\nmodel = KNeighborsClassifier()\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'KNeighborsClassifier (accuracy): {acc}%')\n\nmodel = AdaBoostClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'AdaBoostClassifier (accuracy): {acc}%')\n\nmodel = GradientBoostingClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'GradientBoostingClassifier (accuracy): {acc}%')\n\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'GaussianNB (accuracy): {acc}%')\n\nmodel = svm.SVC(kernel='rbf')\nmodel.fit(X_train, y_train)\nacc = evaluate(model)\nprint(f'SVC (accuracy): {acc}%')"
    }
  ],
  "target": {
    "code_cell_id": 11,
    "code": "from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=data.columns)"
  }
}