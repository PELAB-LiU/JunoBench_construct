{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import datetime as dt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nimport warnings\nwarnings.simplefilter(action=\"ignore\")\n\npd.set_option('display.max_columns',1000)\npd.set_option('display.width', 500)\npd.set_option('display.float_format',lambda x : '%.2f' % x)"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "df_ = pd.read_csv(\"data/dataset.csv\", compression=\"gzip\")\ndf = df_.copy()\ndf.head()"
    },
    {
      "execution_count": 3,
      "code_cell_id": 3,
      "code": "df.shape"
    },
    {
      "execution_count": 4,
      "code_cell_id": 6,
      "code": "def grab_col_names(dataframe, cat_th=10, car_th=20):\n\n cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n dataframe[col].dtypes != \"O\"]\n cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n dataframe[col].dtypes == \"O\"]\n cat_cols = cat_cols + num_but_cat\n cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n num_cols = [col for col in num_cols if col not in num_but_cat]\n\n print(f\"Observations: {dataframe.shape[0]}\")\n print(f\"Variables: {dataframe.shape[1]}\")\n print(f'cat_cols: {len(cat_cols)}')\n print(f'num_cols: {len(num_cols)}')\n print(f'cat_but_car: {len(cat_but_car)}')\n print(f'num_but_cat: {len(num_but_cat)}')\n return cat_cols, num_cols, cat_but_car"
    },
    {
      "execution_count": 5,
      "code_cell_id": 7,
      "code": "cat_cols, num_cols, num_but_cat = grab_col_names(df)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 10,
      "code": "def outlier_thresholds(dataframe, col_name, q1=0.01, q3=0.99):\n quartile1= dataframe[col_name].quantile(q1)\n quartile3= dataframe[col_name].quantile(q3)\n interquantile_range = quartile3 -quartile1\n up_limit= quartile3 +1.5 * interquantile_range\n low_limit= quartile1 -1.5 * interquantile_range\n return low_limit, up_limit"
    },
    {
      "execution_count": 7,
      "code_cell_id": 13,
      "code": "def replace_with_thresholds(dataframe, variable):\n low_limit, up_limit = outlier_thresholds(dataframe, variable)\n dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nfor col in num_cols:\n replace_with_thresholds(df, col)"
    },
    {
      "execution_count": 8,
      "code_cell_id": 14,
      "code": "def check_outlier(dataframe, col_name):\n low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n return True\n else:\n return False\n\ncheck_outlier(df,num_cols)"
    },
    {
      "execution_count": 9,
      "code_cell_id": 36,
      "code": "df.head()"
    },
    {
      "execution_count": 10,
      "code_cell_id": 38,
      "code": "df= df.iloc[:,1:]"
    },
    {
      "execution_count": 11,
      "code_cell_id": 39,
      "code": "from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import AgglomerativeClustering"
    },
    {
      "execution_count": 12,
      "code_cell_id": 40,
      "code": "cat_cols, num_cols, num_but_cat = grab_col_names(df)"
    },
    {
      "execution_count": 13,
      "code_cell_id": 41,
      "code": "df2=df.copy()"
    },
    {
      "execution_count": 14,
      "code_cell_id": 43,
      "code": "sc = MinMaxScaler((0, 1))\ndf2[num_cols] = sc.fit_transform(df2[num_cols])"
    },
    {
      "execution_count": 15,
      "code_cell_id": 50,
      "code": "kmeans = KMeans(n_clusters=30, n_init=\"auto\").fit(df2[[\"TotalTime\",\"Calories\",\"SugarContent\"]])"
    },
    {
      "execution_count": 16,
      "code_cell_id": 51,
      "code": "clusters_kmeans = kmeans.labels_\nclusters_kmeans"
    },
    {
      "execution_count": 17,
      "code_cell_id": 52,
      "code": "df[\"kmeans_cluster\"] = clusters_kmeans\ndf[\"kmeans_cluster\"]= df[\"kmeans_cluster\"] + 1\ndf.head()"
    },
    {
      "execution_count": 18,
      "code_cell_id": 54,
      "code": "df[\"kmeans_cluster\"].value_counts()"
    }
  ],
  "target": {
    "code_cell_id": 61,
    "code": "df.groupby('kmeans_cluster').agg({1: ['count','mean', 'median', 'sum'],\n 2: ['count','mean', 'median', 'sum'],\n 3: ['count','mean', 'median', 'sum'],\n 4: ['count','mean','median', 'sum']})"
  }
}