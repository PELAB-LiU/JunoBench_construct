{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\n\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.losses import categorical_crossentropy\nfrom sklearn.metrics import accuracy_score\nfrom keras.optimizers import Adam\nfrom keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"data\"))"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "data = pd.read_csv('data/fer2013.csv')\n\ndata.shape"
    },
    {
      "execution_count": 3,
      "code_cell_id": 3,
      "code": "data.head(5)"
    },
    {
      "execution_count": 4,
      "code_cell_id": 4,
      "code": "data.Usage.value_counts()"
    },
    {
      "execution_count": 5,
      "code_cell_id": 5,
      "code": "emotion_map = {0: 'Angry', 1: 'Digust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}\nemotion_counts = data['emotion'].value_counts(sort=False).reset_index()\nemotion_counts.columns = ['emotion', 'number']\nemotion_counts['emotion'] = emotion_counts['emotion'].map(emotion_map)\nemotion_counts"
    },
    {
      "execution_count": 6,
      "code_cell_id": 6,
      "code": "import pandas as pd\n\ndata['disgust_images'] = \"\"\n\ndisgust_images = data.loc[data['emotion'] == 1, 'pixels']\ndata.loc[data['emotion'] == 1, 'disgust_images'] = disgust_images\n\ndata.drop(data[data['emotion'] == 1].index, inplace=True)\n\nprint(data.shape)"
    },
    {
      "execution_count": 7,
      "code_cell_id": 7,
      "code": "emotion_map = {0: 'Angry', 2:'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}\nemotion_counts = data['emotion'].value_counts(sort=False).reset_index()\nemotion_counts.columns = ['emotion', 'number']\nemotion_counts['emotion'] = emotion_counts['emotion'].map(emotion_map)\nemotion_counts"
    },
    {
      "execution_count": 8,
      "code_cell_id": 8,
      "code": "plt.figure(figsize=(6,4))\nsns.barplot(x=emotion_counts.emotion, y=emotion_counts.number)\nplt.title('Class distribution')\nplt.ylabel('Number', fontsize=12)\nplt.xlabel('Emotions', fontsize=12)\nplt.show()"
    }
  ],
  "target": {
    "code_cell_id": 9,
    "code": "def row2image(row):\n pixels, emotion = row['pixels'], emotion_map[row['emotion']]\n img = np.array(pixels.split(), dtype=np.uint8)\n img = img.reshape((48, 48))\n image = np.zeros((48, 48, 3), dtype=np.uint8)\n image[:, :, 0] = img\n image[:, :, 1] = img\n image[:, :, 2] = img\n\n return image, emotion\n\nplt.figure(0, figsize=(16,10))\nfor i in range(1,8):\n\n if i-1 not in data['emotion'].unique():\n continue\n\n face = data[data['emotion'] == i-1].iloc[0]\n\n img, label = row2image(face)\n plt.subplot(2,4,i)\n plt.imshow(img)\n plt.title(label)\n\nplt.show()"
  }
}