{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport skimage.io\nimport tensorflow\nimport glob\nimport tqdm\nimport cv2\nfrom tqdm import tqdm\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.layers import InputLayer, Dense, BatchNormalization, Dropout, Flatten, Activation\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nimport torch\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n%matplotlib inline"
    },
    {
      "execution_count": 3,
      "code_cell_id": 1,
      "code": "train_normal = glob.glob('data_small/chest-xray-pneumonia/chest_xray/train/NORMAL/*.jpeg')\na = len(train_normal)\na"
    },
    {
      "execution_count": 4,
      "code_cell_id": 2,
      "code": "train_pneumonia = glob.glob('data_small/chest-xray-pneumonia/chest_xray/train/PNEUMONIA/*.jpeg')\nb = len(train_pneumonia)"
    },
    {
      "execution_count": 5,
      "code_cell_id": 3,
      "code": "print(\"Total nos. of training images are: {}\".format(a + b))"
    },
    {
      "execution_count": 6,
      "code_cell_id": 4,
      "code": "train_datagen = ImageDataGenerator(rescale = 1.0 / 255.0,\n zoom_range = 0.4,\n validation_split = 0.2)\n\nvalid_datagen = ImageDataGenerator(rescale = 1.0 / 255.0,\n validation_split = 0.2)\n\ntest_datagen = ImageDataGenerator(rescale = 1.0 / 255.0)"
    },
    {
      "execution_count": 7,
      "code_cell_id": 5,
      "code": "train_dataset = train_datagen.flow_from_directory(directory = 'data_small/chest-xray-pneumonia/chest_xray/train',\n target_size = (224,224),\n class_mode = 'binary',\n subset = 'training',\n batch_size = 64)"
    },
    {
      "execution_count": 8,
      "code_cell_id": 6,
      "code": "valid_dataset = valid_datagen.flow_from_directory(directory = 'data_small/chest-xray-pneumonia/chest_xray/train',\n target_size = (224,224),\n class_mode = 'binary',\n subset = 'validation',\n batch_size = 64)"
    },
    {
      "execution_count": 9,
      "code_cell_id": 7,
      "code": "train_dataset.class_indices"
    },
    {
      "execution_count": 10,
      "code_cell_id": 8,
      "code": "from pathlib import Path"
    },
    {
      "execution_count": 11,
      "code_cell_id": 9,
      "code": "data_dir = Path('data_small/chest-xray-pneumonia/chest_xray')\ntest_dir = data_dir / 'test'"
    },
    {
      "execution_count": 12,
      "code_cell_id": 10,
      "code": "normal_cases_dir = test_dir / 'NORMAL'\npneumonia_cases_dir = test_dir / 'PNEUMONIA'\n\nnormal_cases = normal_cases_dir.glob('*.jpeg')\npneumonia_cases = pneumonia_cases_dir.glob('*.jpeg')"
    },
    {
      "execution_count": 13,
      "code_cell_id": 13,
      "code": "base_model = VGG16(input_shape=(224,224,3),\n include_top=False,\n weights=\"imagenet\")"
    },
    {
      "execution_count": 14,
      "code_cell_id": 14,
      "code": "for layer in base_model.layers:\n layer.trainable=False"
    },
    {
      "execution_count": 15,
      "code_cell_id": 16,
      "code": "model=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1,activation='sigmoid'))"
    },
    {
      "execution_count": 16,
      "code_cell_id": 18,
      "code": "OPT = tensorflow.keras.optimizers.Adam(learning_rate=0.001)\n\nmodel.compile(loss='binary_crossentropy',\n metrics=[tensorflow.keras.metrics.AUC(name = 'auc')],\n optimizer=OPT)"
    },
    {
      "execution_count": 18,
      "code_cell_id": 19,
      "code": "filepath = 'data_small/best_weights.keras'\n\nearlystopping = EarlyStopping(monitor = 'val_auc',\n mode = 'max' ,\n patience = 3,\n verbose = 1)\n\ncheckpoint = ModelCheckpoint(filepath,\n monitor = 'val_auc',\n mode='max',\n save_best_only=True,\n verbose = 1)\n\ncallback_list = [earlystopping, checkpoint]"
    },
    {
      "execution_count": 19,
      "code_cell_id": 21,
      "code": "model_history=model.fit(train_dataset,\n validation_data=valid_dataset,\n epochs = 1,\n callbacks = callback_list,\n verbose = 1)"
    },
    {
      "execution_count": 20,
      "code_cell_id": 22,
      "code": "class_names = ['PNEUMONIA','NORMAL']"
    }
  ],
  "target": {
    "code_cell_id": 23,
    "code": "from sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\n\nprediction_classes = np.array([])\ntrue_classes = np.array([])\n\nfor i, (x, y) in enumerate(valid_dataset):\n if i >= 1:\n break\n\n prediction_classes = np.concatenate([prediction_classes,\n np.atleast_1d(np.argmax(model.predict(x), axis=-1))])\n true_classes = np.concatenate([true_classes, y])\n\nprint(classification_report(true_classes, prediction_classes, target_names=class_names, digits=4))"
  }
}