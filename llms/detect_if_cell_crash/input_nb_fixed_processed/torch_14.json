{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 12,
      "code": "from torchvision.datasets import VOCDetection\nfrom torchvision.transforms import functional as F\nfrom torch.utils.data import Subset\n\nclass VOCDatasetWrapper(VOCDetection):\n def __init__(self, *args, **kwargs):\n super().__init__(*args, **kwargs)\n\n def __getitem__(self, index):\n image, target = super().__getitem__(index)\n\n image = F.to_tensor(image)\n image = F.normalize(image, mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n\n boxes = []\n labels = []\n for obj in target['annotation']['object']:\n bbox = obj['bndbox']\n box = [float(bbox['xmin']), float(bbox['ymin']), float(bbox['xmax']), float(bbox['ymax'])]\n boxes.append(box)\n labels.append(int(VOC_CLASSES.index(obj['name'])))\n\n target = {\n 'boxes': torch.tensor(boxes, dtype=torch.float32),\n 'labels': torch.tensor(labels, dtype=torch.int64)\n }\n\n return image, target\n\ndef collate_fn(batch):\n return tuple(zip(*batch))\n\nVOC_CLASSES = [\n 'aeroplane', 'bicycle', 'bird', 'boat', 'bottle',\n 'bus', 'car', 'cat', 'chair', 'cow', 'diningtable',\n 'dog', 'horse', 'motorbike', 'person', 'pottedplant',\n 'sheep', 'sofa', 'train', 'tvmonitor'\n]"
    }
  ],
  "target": {
    "code_cell_id": 1,
    "code": "import torch\nimport torchvision\nfrom torchvision.models.detection import fasterrcnn_resnet50_fpn\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom torchvision.transforms import transforms\nfrom torch.utils.data import DataLoader\ntrainset = VOCDatasetWrapper(root=\"data_small\", year='2012', image_set='train', download=False)\ntestset = VOCDatasetWrapper(root=\"data_small\", year='2012', image_set='val', download=False)\ntrainset = Subset(trainset, list(range(4)))\ntestset = Subset(testset, list(range(2)))\ntrainloader = DataLoader(trainset, batch_size=4, shuffle=True, num_workers=0, collate_fn=collate_fn)\ntestloader = DataLoader(testset, batch_size=4, shuffle=False, num_workers=0, collate_fn=collate_fn)\nmodel = fasterrcnn_resnet50_fpn(pretrained=True)\nnum_classes = 21\nin_features = model.roi_heads.box_predictor.cls_score.in_features\nmodel.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.005, momentum=0.9, weight_decay=0.0005)\nnum_epochs = 1\nfor epoch in range(num_epochs):\n  for i, data in enumerate(trainloader, 0):\n        inputs, labels = data\n        optimizer.zero_grad()\n        outputs = model(inputs, labels)\n        loss = sum(loss for loss in outputs.values())\n         loss.backward()\n        optimizer.step()\n        if i % 2000 == 1999:\n            print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, loss.item()))\nprint('Finished Training')]"
  }
}