{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score"
    },
    {
      "execution_count": 2,
      "code_cell_id": 3,
      "code": "train_df = pd.read_csv('data/train_synthetic.csv')\ntest_df = pd.read_csv('data/test_synthetic.csv')\ngreeks_df = pd.read_csv('data/greeks_synthetic.csv')"
    },
    {
      "execution_count": 3,
      "code_cell_id": 4,
      "code": "train_df.head()"
    },
    {
      "execution_count": 4,
      "code_cell_id": 5,
      "code": "train_df = pd.merge(train_df, greeks_df, on=\"Id\")"
    },
    {
      "execution_count": 5,
      "code_cell_id": 7,
      "code": "train_df"
    },
    {
      "execution_count": 6,
      "code_cell_id": 8,
      "code": "train_df.columns"
    },
    {
      "execution_count": 7,
      "code_cell_id": 9,
      "code": "train_df = train_df.drop(\"Id\", axis=1)\ntest_df = test_df.drop(\"Id\", axis=1)"
    },
    {
      "execution_count": 8,
      "code_cell_id": 10,
      "code": "train_df.describe()"
    },
    {
      "execution_count": 10,
      "code_cell_id": 12,
      "code": "categorical_cols_train = train_df.select_dtypes(include=[\"object\"]).columns\ncategorical_cols_test = test_df.select_dtypes(include=[\"object\"]).columns\n\ntrain_df = pd.get_dummies(train_df, columns=categorical_cols_train)\ntest_df = pd.get_dummies(test_df, columns=categorical_cols_test)\n\ntrain_df, test_df = train_df.align(test_df, join=\"left\", axis=1, fill_value=0)\n\nfeature_names = train_df.columns"
    },
    {
      "execution_count": 11,
      "code_cell_id": 13,
      "code": "scaler = StandardScaler()\ntrain_df = scaler.fit_transform(train_df)\ntest_df = scaler.transform(test_df)"
    },
    {
      "execution_count": 12,
      "code_cell_id": 14,
      "code": "train_df = pd.DataFrame(train_df, columns=feature_names)\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(columns=[\"Class\"]), train_df[\"Class\"], test_size=0.25)"
    }
  ],
  "target": {
    "code_cell_id": 15,
    "code": ""
  }
}