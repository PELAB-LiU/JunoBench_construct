{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.exceptions import ConvergenceWarning\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)\n\npd.set_option('display.max_columns', None)\n\npd.set_option('display.width', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "train = pd.read_csv(\"data/train.csv\")\ntest = pd.read_csv(\"data/test.csv\")\n\ndf = pd.concat([train, test], ignore_index=True)\n\nselected_list = [\"GarageArea\", \"LotArea\", \"LotFrontage\", \"OverallQual\", \"PoolArea\", \"MSSubClass\", \"YearBuilt\", \"GrLivArea\",\n \"BedroomAbvGr\", \"LowQualFinSF\", \"TotRmsAbvGrd\", \"Id\", \"SalePrice\"]\n\ndf = df[selected_list]\n\ndf.head()\ndf.shape\ndf.isnull().sum()"
    },
    {
      "execution_count": 3,
      "code_cell_id": 3,
      "code": "def grab_col_names(dataframe, cat_th=10, car_th=25):\n \"\"\"\n grab_col_names for given dataframe\n\n :param dataframe:\n :param cat_th:\n :param car_th:\n :return:\n \"\"\"\n\n cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n dataframe[col].dtypes != \"O\"]\n\n cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n dataframe[col].dtypes == \"O\"]\n\n cat_cols = cat_cols + num_but_cat\n cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n num_cols = [col for col in num_cols if col not in num_but_cat]\n\n print(f\"Observations: {dataframe.shape[0]}\")\n print(f\"Variables: {dataframe.shape[1]}\")\n print(f'cat_cols: {len(cat_cols)}')\n print(f'num_cols: {len(num_cols)}')\n print(f'cat_but_car: {len(cat_but_car)}')\n print(f'num_but_cat: {len(num_but_cat)}')\n\n return cat_cols, cat_but_car, num_cols\n\ncat_cols, cat_but_car, num_cols = grab_col_names(df)"
    }
  ],
  "target": {
    "code_cell_id": 5,
    "code": "def num_summary(dataframe, numerical_col, plot=False):\n quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n print(dataframe[numerical_col].describe(quantiles).T)\n\n if plot:\n dataframe[numerical_col].hist(bins=50)\n plt.xlabel(numerical_col)\n plt.title(numerical_col)\n plt.show(block=True)\n\n print(\"#####################################\")\n\nfor col in num_cols:\n num_summary(df, col, True)\n\nfor col in num_cols:\n\n sns.barplot(df[col])\n\nfor col in num_cols:\n sns.boxplot(data=df, x=col)\n plt.show(block=True)"
  }
}