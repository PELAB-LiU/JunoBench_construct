{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('data'):\n for filename in filenames:\n print(os.path.join(dirname, filename))"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "pd.set_option('display.max_rows', None)"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "train_ds = pd.read_csv(\"data/train.csv\")\ntest_ds = pd.read_csv(\"data/test.csv\")"
    },
    {
      "execution_count": 5,
      "code_cell_id": 4,
      "code": "train_ds.head(5)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 15,
      "code": "train_ds.drop(['Id', 'MoSold', 'GarageYrBlt', 'Condition1', 'Condition2'], axis = 1, inplace = True)"
    },
    {
      "execution_count": 7,
      "code_cell_id": 16,
      "code": "for column in train_ds:\n null_count = train_ds[column].isnull().sum()\n if null_count > 1:\n print(f\"Dropping column {column} with {null_count} missing values.\")\n train_ds.drop(column, axis = 1, inplace = True)"
    },
    {
      "execution_count": 8,
      "code_cell_id": 17,
      "code": "le = LabelEncoder()\nstring_columns = train_ds.select_dtypes(include = ['object']).columns\nfor column in string_columns:\n train_ds[column] = le.fit_transform(train_ds[column])"
    },
    {
      "execution_count": 9,
      "code_cell_id": 18,
      "code": "train_ds.head(5)"
    },
    {
      "execution_count": 10,
      "code_cell_id": 19,
      "code": "X = train_ds.drop(['SalePrice'], axis = 1)\ny = train_ds['SalePrice']"
    },
    {
      "execution_count": 11,
      "code_cell_id": 20,
      "code": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)"
    },
    {
      "execution_count": 12,
      "code_cell_id": 21,
      "code": "print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)"
    },
    {
      "execution_count": 13,
      "code_cell_id": 33,
      "code": "from sklearn.ensemble import RandomForestRegressor\nFReg = RandomForestRegressor(n_estimators = 100, random_state = 42)"
    },
    {
      "execution_count": 14,
      "code_cell_id": 34,
      "code": "FReg.fit(X_train, y_train)"
    },
    {
      "execution_count": 15,
      "code_cell_id": 35,
      "code": "y_pred = FReg.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\nprint(f'R2 Score: {r2}')\nprint(f'MSE: {mse}')"
    },
    {
      "execution_count": 16,
      "code_cell_id": 40,
      "code": "test_ds_ids = test_ds['Id']\ntest_ds.drop(['Id', 'MoSold', 'GarageYrBlt', 'Condition1', 'Condition2'], axis = 1, inplace = True)"
    },
    {
      "execution_count": 18,
      "code_cell_id": 42,
      "code": "test_ds = test_ds[X_train.columns]\nfor col in test_ds.columns:\n if test_ds[col].dtype == 'object':\n test_ds[col] = test_ds[col].fillna(\"\")\n elif pd.api.types.is_numeric_dtype(test_ds[col]):\n test_ds[col] = test_ds[col].fillna(0)"
    },
    {
      "execution_count": 19,
      "code_cell_id": 43,
      "code": "le = LabelEncoder()\nstring_columns = test_ds.select_dtypes(include = ['object']).columns\nfor column in string_columns:\n test_ds[column] = le.fit_transform(test_ds[column])"
    }
  ],
  "target": {
    "code_cell_id": 45,
    "code": "predictions = FReg.predict(test_ds)\nsubmissions_df = pd.DataFrame({\n \"ID\" : test_ds_ids,\n \"Predictions\" : predictions\n})"
  }
}