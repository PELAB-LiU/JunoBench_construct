{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models, losses, Model\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\n\nimport subprocess\nfrom IPython.display import FileLink, display\n\nfrom sklearn.metrics import confusion_matrix, classification_report"
    },
    {
      "execution_count": 2,
      "code_cell_id": 1,
      "code": "num_samples = (len(os.listdir('data_small/Chic')) +\n len(os.listdir('data_small/Duck')))\n\nimg_height, img_width = 224,224\nbatch_size = num_samples // 200"
    },
    {
      "execution_count": 3,
      "code_cell_id": 2,
      "code": "train_ds = tf.keras.utils.image_dataset_from_directory(\n 'data_small',\n validation_split=0.2,\n subset=\"training\",\n label_mode='binary',\n seed=123,\n image_size=(img_height, img_width),\n batch_size=batch_size)"
    },
    {
      "execution_count": 4,
      "code_cell_id": 3,
      "code": "val_ds = tf.keras.utils.image_dataset_from_directory(\n 'data_small',\n validation_split=0.2,\n subset=\"validation\",\n label_mode='binary',\n seed=123,\n image_size=(img_height, img_width),\n batch_size=batch_size)"
    },
    {
      "execution_count": 5,
      "code_cell_id": 4,
      "code": "test_ds = tf.keras.utils.image_dataset_from_directory(\n 'data_small_test',\n image_size=(img_height, img_width),\n label_mode='binary',\n batch_size=batch_size)"
    },
    {
      "execution_count": 6,
      "code_cell_id": 5,
      "code": "class_names = train_ds.class_names\nprint(class_names)"
    },
    {
      "execution_count": 7,
      "code_cell_id": 6,
      "code": "base_model = tf.keras.applications.ResNet50(weights = 'imagenet', include_top = False, input_shape = (224,224,3))"
    },
    {
      "execution_count": 8,
      "code_cell_id": 7,
      "code": "x = base_model.output\nx = keras.layers.GlobalAveragePooling2D()(x)\n\nx = keras.layers.Dense(units=1024, activation='relu')(x)\nx = keras.layers.Dense(units=512, activation='relu')(x)\nx = keras.layers.Dense(units=256, activation='relu')(x)\nx = keras.layers.Dense(units=128, activation='relu')(x)\nx = keras.layers.Dense(units=1, activation='sigmoid')(x)\n\nmodel = keras.models.Model(inputs=base_model.input,\n outputs=x)"
    },
    {
      "execution_count": 9,
      "code_cell_id": 8,
      "code": "for layer in model.layers[:175]:\n layer.trainable = False"
    },
    {
      "execution_count": 10,
      "code_cell_id": 9,
      "code": "model.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n)"
    },
    {
      "execution_count": 11,
      "code_cell_id": 10,
      "code": "history = model.fit(\n train_ds,\n validation_data=val_ds,\n epochs=2,\n callbacks=[\n tf.keras.callbacks.EarlyStopping(\n monitor='val_loss',\n patience=5,\n restore_best_weights=True\n ),\n tf.keras.callbacks.ReduceLROnPlateau(\n monitor='val_loss',\n patience=3\n )\n ]\n)"
    },
    {
      "execution_count": 12,
      "code_cell_id": 11,
      "code": "results = model.evaluate(test_ds, verbose=0)\nprint(\" Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))"
    },
    {
      "execution_count": 13,
      "code_cell_id": 12,
      "code": "predictions = (model.predict(test_ds) >= 0.5)"
    }
  ],
  "target": {
    "code_cell_id": 14,
    "code": "predictions = np.array([])\nlabels = np.array([])\nfor x, y in test_ds:\n\n pred = model.predict(x)\n pred_classes = np.argmax(pred, axis=1)\n predictions = np.concatenate([predictions, pred_classes])\n\n labels = np.concatenate([labels, np.argmax(y.numpy(), axis=-1)])\n\ntf.math.confusion_matrix(labels=labels, predictions=predictions).numpy()"
  }
}