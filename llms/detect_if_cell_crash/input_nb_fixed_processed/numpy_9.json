{
  "executed": [],
  "target": {
    "code_cell_id": 14,
    "code": "import os\nimport numpy as np\nimport torch\n\ndef load_loss_weights_from_directory(directory_path):\n weight_files = [filename for filename in os.listdir(directory_path) if filename.endswith(\".npy\")]\n\n weights = [np.atleast_1d(np.load(os.path.join(directory_path, filename))) for filename in weight_files]\n\n return np.concatenate(weights)\n\ndef save_weights_to_directory(directory_path, weights):\n os.makedirs(directory_path, exist_ok=True)\n np.save(os.path.join(directory_path, \"updated_regression_weights.npy\"), weights)\n\nregression_weights_directory = 'data/adjusted_survival_2019'\n\nregression_weight = load_loss_weights_from_directory(regression_weights_directory)\n\nnum_epochs_update_regression = 5\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\noutput_directory = 'data/updated_regression_weights'\nos.makedirs(output_directory, exist_ok=True)\n\nfor epoch in range(num_epochs_update_regression):\n\n mean_loss_regression = 0.5\n std_loss_regression = 0.1\n\n reference_value_regression = 0.5\n\n update_factor_regression = np.exp((mean_loss_regression - reference_value_regression) / std_loss_regression)\n\n update_factor_regression = max(0.0, min(1.0, update_factor_regression))\n\n regression_weight = torch.tensor(regression_weight, dtype=torch.float32, device=device)\n\n if update_factor_regression < 1e-6 and torch.all(regression_weight == 0):\n\n update_factor_regression = 1e-3\n\n regression_weight *= update_factor_regression\n\n save_weights_to_directory(output_directory, regression_weight.cpu().numpy())\n\nwith np.printoptions(threshold=np.inf):\n print(f\"Regression Weight (Epoch {epoch + 1}): \\n{regression_weight}\")"
  }
}