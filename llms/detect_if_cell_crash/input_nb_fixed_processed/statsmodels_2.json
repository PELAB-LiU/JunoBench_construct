{
  "executed": [
    {
      "execution_count": 1,
      "code_cell_id": 0,
      "code": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nimport seaborn as sns\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom matplotlib.ticker import MultipleLocator\n\ntrain_csv_path = \"data/train.csv\"\ntrain = pd.read_csv(train_csv_path)\n\ntest_csv_path = \"data/test.csv\"\ntest = pd.read_csv(test_csv_path)"
    },
    {
      "execution_count": 2,
      "code_cell_id": 6,
      "code": "train['date'] = pd.to_datetime(train['date'])\ntrain['day'] = train['date'].dt.day\ntrain['month'] = train['date'].dt.month\ntrain['year'] = train['date'].dt.year\ntrain['date'] = pd.to_datetime(train['date'])\ntrain['day_of_week'] = train['date'].dt.weekday\ntrain['week_of_year'] = train['date'].dt.isocalendar().week.astype(int)\ntrain['quarter'] = train['date'].dt.quarter\ntrain['day_of_year'] = train['date'].dt.dayofyear\n\ntrain['month_sin'] = np.sin(2 * np.pi * train['month'] / 12)\ntrain['month_cos'] = np.cos(2 * np.pi * train['month'] / 12)\n\ntrain['week_sin'] = np.sin(2 * np.pi * train['day_of_week'] / 7)\ntrain['week_cos'] = np.cos(2 * np.pi * train['day_of_week'] / 7)\n\ntrain['sales_lag_7'] = train['sales'].shift(7)\ntrain['sales_lag_365'] = train['sales'].shift(365)"
    },
    {
      "execution_count": 3,
      "code_cell_id": 9,
      "code": "train_subset = train[(train['store'] == 8) & (train['item'] == 20)]\ntrain_subset.set_index('date', inplace=True)\ntrain_subset.index.freq = 'D'\ntrain_subset.head()"
    },
    {
      "execution_count": 4,
      "code_cell_id": 10,
      "code": "sarima_data = train_subset[['sales']]\n\nprint(sarima_data.index)\nsarima_data.head()"
    },
    {
      "execution_count": 5,
      "code_cell_id": 12,
      "code": "train_end_date = '2017-09-30'\npred_start_date = '2017-10-01'\npred_end_date = '2017-12-31'\n\ny_train = sarima_data.loc[:train_end_date, 'sales']\ny_val = sarima_data.loc[pred_start_date:pred_end_date, 'sales']\n\nexog_columns = ['year','day_of_week', 'month_cos']\n\nexog_train = train_subset.loc[:train_end_date, exog_columns]\nexog_val = train_subset.loc[pred_start_date:pred_end_date, exog_columns]\n\np, d, q = 1, 1, 1\nP, D, Q, s = 1, 1, 1, 7\n\nmodel = SARIMAX(y_train, exog=exog_train, order=(p, d, q), seasonal_order=(P, D, Q, s))\nresults = model.fit(maxiter=150, disp=-1)\n\ny_pred = results.predict(start=pd.Timestamp(pred_start_date), end=pd.Timestamp(pred_end_date), exog=exog_val, dynamic=False)\n\nrmse = mean_squared_error(y_val, y_pred, squared=False)\nprint(f'RMSE: {rmse}')"
    },
    {
      "execution_count": 6,
      "code_cell_id": 14,
      "code": "residuals = y_val - y_pred\nplt.figure(figsize=(12, 6))\nplt.plot(residuals.index, residuals, label='Residuals')\nplt.axhline(0, color='red', linestyle='--')\nplt.title('Residuals Over Time')\nplt.grid(True)\nplt.legend()\nplt.show()"
    }
  ],
  "target": {
    "code_cell_id": 18,
    "code": "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nmax_acf_lags = min(len(residuals) - 1, 180)\nmax_pacf_lags = min(len(residuals) // 2 - 1, 180)\n\nplt.figure(figsize=(12, 6))\nplot_acf(residuals, lags=max_acf_lags, title='ACF of Residuals')\nplt.show()\n\nplt.figure(figsize=(12, 6))\nplot_pacf(residuals, lags=max_pacf_lags, title='PACF of Residuals')\nplt.show()"
  }
}